<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-09-20T03:36:55.906Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS红宝书第二章</title>
    <link href="http://example.com/2021/09/20/JS%E7%BA%A2%E5%AE%9D%E4%B9%A6%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <id>http://example.com/2021/09/20/JS%E7%BA%A2%E5%AE%9D%E4%B9%A6%E7%AC%AC%E4%BA%8C%E7%AB%A0/</id>
    <published>2021-09-20T03:36:40.000Z</published>
    <updated>2021-09-20T03:36:55.906Z</updated>
    
    
    
    
    
    <category term="javascript" scheme="http://example.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS红宝书</title>
    <link href="http://example.com/2021/09/20/JS%E7%BA%A2%E5%AE%9D%E4%B9%A6/"/>
    <id>http://example.com/2021/09/20/JS%E7%BA%A2%E5%AE%9D%E4%B9%A6/</id>
    <published>2021-09-20T03:33:05.000Z</published>
    <updated>2021-09-20T15:34:56.831Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这篇博客用来记录阅读红宝书过程中的新发现。之前学习JavaScript大多数是跟着一个叫做现代JavaScript教程的内容学习的。两者我觉得其实各有所长吧</p><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h5 id="1-强调是一个脚本语言"><a href="#1-强调是一个脚本语言" class="headerlink" title="1.强调是一个脚本语言"></a>1.强调是一个脚本语言</h5><p>初学js的时候，其实并没有非常在意这门语言的发展历程，而是直接关注语法层面的使用了。一直到了学习一个关于事件循环队列执行顺序的问题的时候，我第一次才去找了js相关标准的官方文档，ECMA262。</p><p>红宝书里面非常早的讲了JS是一门脚本语言。就是说官方只给出了一个规范，那么具体的浏览器会给出符合这个规范的解释器。也就是说我们的浏览器里面就包含了js代码的解释器。</p><p>说到脚本语言，大多数人会想起来小时候那个小海龟画的logo。其实大多数脚本语言都是一个解释器预定义好的命令集合的子集。广义来说，甚至手游模拟器里面的操作录制也可以算是一门脚本语言。js发展到今天已经相当完备了，以至于第一眼看上去和python和java这样的语言并没有太多的差别，不过红宝书仍然强调了js是脚本语言这个概念，我觉得还是挺好的。</p><h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h5 id="1-进制的转换"><a href="#1-进制的转换" class="headerlink" title="1.进制的转换"></a>1.进制的转换</h5><p>在做面试题的时候，很多时候需要用到进制转换相关的内容，以前的做法都是手动实现一个短除法，把每一位push进一个数组里面，现在发现其实js的toString方法就可以完成从十进制向任意进制的转换，只需要在转换数字的时候传入一个参数就可以了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">10</span>; </span><br><span class="line"><span class="built_in">console</span>.log(num.toString()); <span class="comment">// &quot;10&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">2</span>)); <span class="comment">// &quot;1010&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">8</span>)); <span class="comment">// &quot;12&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">10</span>)); <span class="comment">// &quot;10&quot; </span></span><br><span class="line"><span class="built_in">console</span>.log(num.toString(<span class="number">16</span>)); <span class="comment">// &quot;a&quot;</span></span><br></pre></td></tr></table></figure><p>默认情况下对number调用toString方法，就是参数为10时候的方法</p><p>从任意进制转换到十进制倒是很早就知道了，用parseInt方法就可以了，也记录一下作为比较</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num1 = <span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>, <span class="number">2</span>); <span class="comment">// 2，按二进制解析</span></span><br><span class="line"><span class="keyword">let</span> num2 = <span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>, <span class="number">8</span>); <span class="comment">// 8，按八进制解析</span></span><br><span class="line"><span class="keyword">let</span> num3 = <span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>, <span class="number">10</span>); <span class="comment">// 10，按十进制解析</span></span><br><span class="line"><span class="keyword">let</span> num4 = <span class="built_in">parseInt</span>(<span class="string">&quot;10&quot;</span>, <span class="number">16</span>); <span class="comment">// 16，按十六进制解析</span></span><br></pre></td></tr></table></figure><h5 id="2-模板字面量"><a href="#2-模板字面量" class="headerlink" title="2.模板字面量"></a>2.模板字面量</h5><p>第一次接触这个概念的时候，因为有过学习python的经历，看到模板字面量自然而然地会想起来python中的格式化字符串，也就是f开头的formatted string。当时有过一闪而过的念头，为什么js中的模板字面量没有像其他语言一样也叫做格式化字符串，不过没有深究。红宝书里面就明确提到了，模板字面量最初就是为了模板而生的，相当于一开始的目的并不是formmated string，而是类似python中三个引号表示的多行字符串。这样的好处就是可以把换行保留，从而还原html模板的格式，比如类似下面的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pageHTML = <span class="string">` </span></span><br><span class="line"><span class="string">&lt;div&gt; </span></span><br><span class="line"><span class="string">    &lt;a href=&quot;#&quot;&gt; </span></span><br><span class="line"><span class="string">        &lt;span&gt;Jake&lt;/span&gt; </span></span><br><span class="line"><span class="string">    &lt;/a&gt; </span></span><br><span class="line"><span class="string">&lt;/div&gt;`</span>;</span><br></pre></td></tr></table></figure><p>因为模板字面量基本上是严格遵守了字符串内部的内容，包括空格和换行，因此不能随便缩进。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个模板字面量在换行符之后有 25 个空格符</span></span><br><span class="line"><span class="keyword">let</span> myTemplateLiteral = <span class="string">`first line </span></span><br><span class="line"><span class="string"> second line`</span>; </span><br><span class="line"><span class="built_in">console</span>.log(myTemplateLiteral.length); <span class="comment">// 47 </span></span><br><span class="line"><span class="comment">// 这个模板字面量以一个换行符开头</span></span><br><span class="line"><span class="keyword">let</span> secondTemplateLiteral = <span class="string">` </span></span><br><span class="line"><span class="string">first line </span></span><br><span class="line"><span class="string">second line`</span>; </span><br><span class="line"><span class="built_in">console</span>.log(secondTemplateLiteral[<span class="number">0</span>] === <span class="string">&#x27;\n&#x27;</span>); <span class="comment">// true </span></span><br><span class="line"><span class="comment">// 这个模板字面量没有意料之外的字符</span></span><br><span class="line"><span class="keyword">let</span> thirdTemplateLiteral = <span class="string">`first line </span></span><br><span class="line"><span class="string">second line`</span>; </span><br><span class="line"><span class="built_in">console</span>.log(thirdTemplateLiteral); </span><br><span class="line"><span class="comment">// first line </span></span><br><span class="line"><span class="comment">// second line</span></span><br></pre></td></tr></table></figure><p>模板字符串还有一个特点是，如果你想观察模板字符串中间的变量，那么在调用的时候需要直接接参数，不能对它加上括号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">6</span>; </span><br><span class="line"><span class="keyword">let</span> b = <span class="number">9</span>; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">simpleTag</span>(<span class="params">strings, ...expressions</span>) </span>&#123; </span><br><span class="line"> <span class="built_in">console</span>.log(strings); </span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">const</span> expression <span class="keyword">of</span> expressions) &#123; </span><br><span class="line"> <span class="built_in">console</span>.log(expression); </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">return</span> <span class="string">&#x27;foobar&#x27;</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> taggedResult = simpleTag<span class="string">`<span class="subst">$&#123; a &#125;</span> + <span class="subst">$&#123; b &#125;</span> = <span class="subst">$&#123; a + b &#125;</span>`</span>; </span><br><span class="line"><span class="comment">// [&quot;&quot;, &quot; + &quot;, &quot; = &quot;, &quot;&quot;] </span></span><br><span class="line"><span class="comment">// 6 </span></span><br><span class="line"><span class="comment">// 9 </span></span><br><span class="line"><span class="comment">// 15 </span></span><br><span class="line"><span class="built_in">console</span>.log(taggedResult); <span class="comment">// &quot;foobar&quot;</span></span><br></pre></td></tr></table></figure><h5 id="3-原始字符串。"><a href="#3-原始字符串。" class="headerlink" title="3.原始字符串。"></a>3.原始字符串。</h5><p>这个相当于python里面r开头的字符串，调用方式是String.raw然后直接接模板字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Unicode 示例</span></span><br><span class="line"><span class="comment">// \u00A9 是版权符号</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`\u00A9`</span>); <span class="comment">// © </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`\u00A9`</span>); <span class="comment">// \u00A9 </span></span><br><span class="line"><span class="comment">// 换行符示例</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`first line\nsecond line`</span>); </span><br><span class="line"><span class="comment">// first line </span></span><br><span class="line"><span class="comment">// second line </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`first line\nsecond line`</span>); <span class="comment">// &quot;first line\nsecond line&quot;</span></span><br></pre></td></tr></table></figure><h5 id="4-symbol"><a href="#4-symbol" class="headerlink" title="4.symbol"></a>4.symbol</h5><p>暂时的理解就是，symbol是一个可以被读取，但是不会被遍历到的属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h5 id="5-标签"><a href="#5-标签" class="headerlink" title="5.标签"></a>5.标签</h5><p>这个也是以前不知道的内容，在一段语句之前可以加一个标签，语法格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label: statement</span><br></pre></td></tr></table></figure><p> 例如以下的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>; </span><br><span class="line">outermost: </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123; </span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span>) &#123; </span><br><span class="line">            <span class="keyword">break</span> outermost; </span><br><span class="line">        &#125; </span><br><span class="line">        num++; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 55</span></span><br></pre></td></tr></table></figure><p>有点像c语言里面的goto</p><h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><ul><li>18：00到别墅住房间，看到真死者和高富帅</li><li>19：00-21：30去聚会，白清纯，张普通，何低调来了</li><li>22：00虐猫</li><li>22：30真死者去厕所，白清纯跟上</li><li>22：50真死者回来，高富帅说话</li><li>23：00真死者和高富帅灌酒</li><li>23：20假装睡着</li><li>0：00张普通叫醒我</li><li>1：00去杀真死者</li><li>1：10看真死者身体</li><li>1：15杀人</li><li>1：30睡着</li><li>2：00何低调开门</li></ul><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>一轮队长好人：</p><p>自己别人：自己同意，50%抽到民——成功，50%抽到狼——，</p><p>成功——另外一个不明，失败——另一个坏</p><p>二轮队长好人：自己和一轮</p><p>一轮：好抽好——成功，好抽坏——失败，坏抽好</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;这篇博客用来记录阅读红宝书过程中的新发现。之前学习JavaScript大多数是跟着一个叫做现代JavaScript教程的内容学习的。两者我觉</summary>
      
    
    
    
    
    <category term="javascript" scheme="http://example.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>My New Post</title>
    <link href="http://example.com/2021/09/09/My-New-Post/"/>
    <id>http://example.com/2021/09/09/My-New-Post/</id>
    <published>2021-09-09T12:01:16.000Z</published>
    <updated>2021-09-11T05:55:30.706Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS中的任务队列详解"><a href="#JS中的任务队列详解" class="headerlink" title="JS中的任务队列详解"></a>JS中的任务队列详解</h2><p>在刷面试题的时候偶然遇到一道很复杂的输出判断题。自己之前对宏任务和微任务的理解都停留在比较简单的日常开发阶段，于是就借着这个机会，仔细梳理了JavaScript中几乎所有和微任务执行相关的语法，总结了以下的结果：</p><p>在讲各个语法之前，首先提一下我在研究这部分内容的时候使用的方法。我们已经知道es6中提供了Promise对象，使用方式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (somethingIsTrue)</span><br><span class="line">resolve(<span class="string">&#x27;done&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;oh no&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>创建这个对象之后会根据if括号内的条件返回一个状态已经确定为fulfilled或者是rejected的Promise对象，这个对象身上最最重要的方法就是then，then接收两个函数作为参数，为了简便一般都写成箭头函数的形式，第一个函数在promise对象状态为fulfilled时候执行，第二个函数在promise对象状态为rejected时候执行。两个函数的参数就是建立promise对象时候向resolve和reject传进去的值。当然，如果在出现错误的时候并不想对错误做任何的操作，只将一个函数作为参数传入then也是可以的，这个函数只在fulfilled状态下生效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">promise.then(</span><br><span class="line"><span class="function">(<span class="params">result</span>)=&gt;</span><span class="built_in">console</span>.log(result),</span><br><span class="line"><span class="function">(<span class="params">error</span>)=&gt;</span><span class="built_in">console</span>.log(error)</span><br><span class="line">)</span><br><span class="line"><span class="comment">// or just one parameter function</span></span><br><span class="line">promise.then(</span><br><span class="line">    <span class="function">(<span class="params">result</span>)=&gt;</span><span class="built_in">console</span>.log(result)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>then这个方法除了处理promise的结果，自身也会返回一个thenable对象，这个对象和promise对象有非常多的相似之处，比如又可以对这个对象进行then操作。因此，就会有了著名的Promise链式调用，一般来说，长这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">    .then(<span class="function"><span class="params">result</span>=&gt;</span><span class="built_in">console</span>.log(result))</span><br><span class="line">    .then(<span class="function"><span class="params">result</span>=&gt;</span><span class="built_in">console</span>.log(result))</span><br><span class="line">    .then(<span class="function"><span class="params">result</span>=&gt;</span><span class="built_in">console</span>.log(result))</span><br><span class="line">    .then(<span class="function"><span class="params">result</span>=&gt;</span><span class="built_in">console</span>.log(result))</span><br><span class="line">    .then(<span class="function"><span class="params">result</span>=&gt;</span><span class="built_in">console</span>.log(result))</span><br><span class="line">    .then(<span class="function"><span class="params">result</span>=&gt;</span><span class="built_in">console</span>.log(result))</span><br><span class="line">    .then(<span class="function"><span class="params">result</span>=&gt;</span><span class="built_in">console</span>.log(result))</span><br><span class="line">    .then(<span class="function"><span class="params">result</span>=&gt;</span><span class="built_in">console</span>.log(result))</span><br><span class="line">    .then(<span class="function"><span class="params">result</span>=&gt;</span><span class="built_in">console</span>.log(result))</span><br></pre></td></tr></table></figure><p>需要说明的是，then里面即使没有任何的返回值，其结果也会被当成fulfilled传递给下一个then，如果下一个then中需要有错误判断的内容，就要返回一个真正的Promise对象。</p><p>铺垫的内容大概就是这样，我在研究问题之前，基于promise链，在测试用的js文件开头和结尾，分别加上了以下的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;macroLoop start&#x27;</span>)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;microLoop1 start&#x27;</span>))</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;microLoop2 start&#x27;</span>))</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;microLoop3 start&#x27;</span>))</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;microLoop4 start&#x27;</span>))</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;microLoop5 start&#x27;</span>))</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;microLoop6 start&#x27;</span>))</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;microLoop7 start&#x27;</span>))</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;microLoop8 start&#x27;</span>))</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;microLoop9 start&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// code to be analyzed</span></span><br><span class="line"><span class="comment">// balabala...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;macroLoop end&#x27;</span>)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;microLoop1 end&#x27;</span>))</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;microLoop2 end&#x27;</span>))</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;microLoop3 end&#x27;</span>))</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;microLoop4 end&#x27;</span>))</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;microLoop5 end&#x27;</span>))</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;microLoop6 end&#x27;</span>))</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;microLoop7 end&#x27;</span>))</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;microLoop8 end&#x27;</span>))</span><br><span class="line">    .then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;microLoop9 end&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这两段代码的输出顺序是非常简单的，promise对象建立过程中的代码都是处于第一轮宏任务中，因此首先输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">macroLoop start</span><br><span class="line">macroLoop end</span><br></pre></td></tr></table></figure><p>第一轮宏任务除了输出之外，还会给下一轮挂上两个微任务，这两个微任务按照进入队列的顺序会在下一轮里面输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">microLoop1 start</span><br><span class="line">microLoop1 end</span><br></pre></td></tr></table></figure><p>这两个微任务的完成又会分别给下一轮挂上两个微任务，然后再输出，再挂新任务……以此类推，最后输出的是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">microLoop9 start</span><br><span class="line">microLoop9 end</span><br></pre></td></tr></table></figure><p>我自己觉得这个方法的精妙之处在于，任何放在两段代码之间的代码，其输出顺序都在相应的周期内的start之后，end之前，例如一个输出在第五个微任务执行轮次，那么就会输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">microLoop5 start</span><br><span class="line">some task finished</span><br><span class="line">microLoop5 end</span><br></pre></td></tr></table></figure><p>这样，我们在对任务的分析之前，就已经可以通过输出结果，精确地判断到底是在哪一轮微任务中的结果，而不是仅仅分析题目代码自身的输出顺序。这两段代码就像双峰塔一样存在，可以方便我们从更加宏观的参照物视角进行分析。另一个比喻就是，这两段代码类似于跳高比赛中的横杆，可以记录下代码最“高”跳到的轮次。</p><p>除了这首尾两段基准线性质的输出代码，具体研究一种语法的时候，我采用的方式是递归调用的写法。通过把代码转化成模板字符串然后用eval执行，可以快速批量生成许多内容几乎完全一致的函数。这种写法的优势是可以更加直观地感受每一种语法所对应输出的轮次，而不会一上来就被复杂的题目所打乱思路。</p><p>总结了这么多，也差不多该进入正题了，各种语法所对应的输出轮次如下（基准线代码已经省略，分别在测试代码头尾）：</p><h4 id="1-主函数内直接输出"><a href="#1-主函数内直接输出" class="headerlink" title="1.主函数内直接输出"></a>1.主函数内直接输出</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello&#x27;</span>)</span><br></pre></td></tr></table></figure><p> 这没什么好说的，最最最简单的，输出位置是宏任务这一轮：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">macroLoop start</span><br><span class="line">hello</span><br><span class="line">macroLoop end</span><br></pre></td></tr></table></figure><h4 id="2-函数和Promise对象建立过程中输出"><a href="#2-函数和Promise对象建立过程中输出" class="headerlink" title="2.函数和Promise对象建立过程中输出"></a>2.函数和Promise对象建立过程中输出</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ordinary</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;ordinary&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">ordinary()</span><br></pre></td></tr></table></figure><p>这个仍然相当于在主函数内直接输出，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">macroLoop start</span><br><span class="line">ordinary</span><br><span class="line">macroLoop end</span><br></pre></td></tr></table></figure><p>promise对象建立的时候，resolve和reject之前的输出结果也相当于在主函数内直接输出，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;state is still pending&#x27;</span>)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">macroLoop start</span><br><span class="line">state is still pending</span><br><span class="line">macroLoop end</span><br></pre></td></tr></table></figure><p>函数内部新建一个promise对象仍然是在主函数内输出，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ordinary</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;ordinary state is still pending&#x27;</span>)</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">ordinary()</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">macroLoop start</span><br><span class="line">ordinary state is still pending</span><br><span class="line">macroLoop end</span><br></pre></td></tr></table></figure><h4 id="3-普通函数返回的Promise的then的输出"><a href="#3-普通函数返回的Promise的then的输出" class="headerlink" title="3.普通函数返回的Promise的then的输出"></a>3.普通函数返回的Promise的then的输出</h4><p>一般来说，这样的函数具有如下的形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;state is still pending&#x27;</span>)</span><br><span class="line">        resolve()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// another function that use test() to append then clauses</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testThen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    test().then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;test then&#x27;</span>))</span><br><span class="line">&#125;</span><br><span class="line">testThen()</span><br></pre></td></tr></table></figure><p>输出结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">macroLoop start</span><br><span class="line">test </span><br><span class="line">state is still pending</span><br><span class="line">macroLoop end</span><br><span class="line">microLoop1 start</span><br><span class="line">test then</span><br><span class="line">microLoop1 end</span><br></pre></td></tr></table></figure><h4 id="4-async函数没有返回对象的then的输出"><a href="#4-async函数没有返回对象的then的输出" class="headerlink" title="4.async函数没有返回对象的then的输出"></a>4.async函数没有返回对象的then的输出</h4><p>这种函数的形式一般是这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;async&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// another function that use async() to append then clauses</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncThen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">async</span>().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;async then&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">asyncThen()</span><br></pre></td></tr></table></figure><p>即使没有任何的返回对象，async函数也会自动返回一个PromiseState已经确定为fulfilled，PromiseResult结果为undefined的Promise对象，所以输出顺序是这样的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">macroLoop start</span><br><span class="line"><span class="keyword">async</span></span><br><span class="line">macroLoop end</span><br><span class="line">microLoop1 start</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="keyword">async</span> then</span><br><span class="line">microLoop1 end</span><br></pre></td></tr></table></figure><h4 id="5-async函数返回非Promise对象的then的输出"><a href="#5-async函数返回非Promise对象的then的输出" class="headerlink" title="5.async函数返回非Promise对象的then的输出"></a>5.async函数返回非Promise对象的then的输出</h4><p>async函数返回一个非Promise对象，例如返回数字，字符串，普通对象的时候，会将原来的返回结果包装为PromiseResult，返回一个Promise对象，所以输出顺序仍然一样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;async&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;nonPromise&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// another function that use async() to append then clauses</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncThen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">async</span>().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;async then&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">asyncThen()</span><br></pre></td></tr></table></figure><p> 输出顺序为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">macroLoop start</span><br><span class="line">test</span><br><span class="line">macroLoop end</span><br><span class="line">microLoop1 start</span><br><span class="line">nonPromise</span><br><span class="line">async then</span><br><span class="line">microLoop1 end</span><br></pre></td></tr></table></figure><h4 id="6-async函数返回Promise对象的then的输出"><a href="#6-async函数返回Promise对象的then的输出" class="headerlink" title="6.async函数返回Promise对象的then的输出"></a>6.async函数返回Promise对象的then的输出</h4><p>虽然async函数具有自动封装的特性，但是有些乱七八糟的面试题会故意考察async函数返回Promise对象时候then的输出位置。需要注意的是，有些教程说，async函数会直接返回这个你自己提供的Promise对象，这是不对的。async函数会把这个Promise对象再进行一次封装，对async函数返回结果调用then不等于直接对async函数中自己提供的Promise对象调用then。举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;async&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;async return promise&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// another function that use test() to append then clauses</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncThen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">async</span>().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;async then&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">asyncThen()</span><br></pre></td></tr></table></figure><p>证明方法就是，可以用一个中间变量接住async函数中的Promise.resolve()，然后向这个变量中写入一个属性，在返回之前输出这个中间变量，在asyncThen中输出async()的返回结果，查看返回结果上还有没有这个属性，显然是没有的。</p><p>输出顺序为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">macroLoop start</span><br><span class="line">test</span><br><span class="line">macroLoop end</span><br><span class="line">microLoop1 start</span><br><span class="line">microLoop1 end</span><br><span class="line">microLoop2 start</span><br><span class="line">microLoop2 end</span><br><span class="line">microLoop3 start</span><br><span class="line">async return promise</span><br><span class="line">async then</span><br><span class="line">microLoop3 end</span><br></pre></td></tr></table></figure><p>为什么then的输出结果直接跳到了第三轮？原因是这样的：async实现的原理实际上是一个自动执行器。在对return结果进行包装的时候，会分为两步走：第一步，自动执行return的结果直到得到一个<strong>状态完全确定</strong>的结果；第二部，将状态确定后的结果，封装为一个确定状态的Promise对象。</p><p>Promise.resolve()并不会像普通函数中那样直接返回，而是会在第一轮微任务中挂上一个then，等待返回的结果（因为async函数需要一个确定的状态作为返回的Promise的状态）。这一点很容易验证：可以把Promise.resolve()再挂上几个then，然后把挂上then的结果返回。第一个then对asyncThen中的输出没有影响。即返回Promise.resolve()和Promise.resolve().then()对asyncThen中内容的输出轮次是没有任何影响的，但是，当继续挂then的时候，每挂一个then，都会使得asyncThen中内容的输出轮次往后挪动一轮。</p><p>在第一轮微任务中执行完then获得原装结果的状态，隐式地调用一次then，将then的结果返回为async函数的最终输出结果。因此宏任务轮次中挂上的一轮微任务仅仅是“封装得到async函数的结果“。一轮微任务结束，得到了async函数的结果，</p><p>async语法糖是es2017中新添加的，如果我们想要了解它的实现原理，可以敲一段es2017的代码，然后用babel转译成es2015的。转译结果就是，可以得到一个这样的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_asyncToGenerator</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> gen = fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params">key, arg</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">var</span> info = gen[key](arg)</span><br><span class="line">                    <span class="keyword">var</span> value = info.value</span><br><span class="line">                &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                    reject(error)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (info.done) &#123;</span><br><span class="line">                    resolve(value)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(value).then(</span><br><span class="line">                        <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> step(<span class="string">&quot;next&quot;</span>, value)</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">return</span> step(<span class="string">&quot;throw&quot;</span>, err)</span><br><span class="line">                        &#125;</span><br><span class="line">                    )</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> step(<span class="string">&quot;next&quot;</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 原来的async函数则会被转译成这样的形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">async</span> = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ref = _asyncToGenerator(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">async</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ref.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>原有的函数会被原封不动地转换成这样的一个generator函数。中间不设置任何的yield状态，直接返回结果。如果没有结果，那么就会返回一个undefined。既然执行一步到位，那么，这个generator就可以大幅度地缩减，变成下面这个版本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_asyncToGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> middle = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> asyncReturn = <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;async return promise&#x27;</span>)</span><br><span class="line">            <span class="comment">// .then(function () &#123;</span></span><br><span class="line">            <span class="comment">//     console.log(&quot;then&quot;)</span></span><br><span class="line">            <span class="comment">//     return &#x27;return loop1&#x27;</span></span><br><span class="line">            <span class="comment">// &#125;)</span></span><br><span class="line">            <span class="comment">// .then(function () &#123;</span></span><br><span class="line">            <span class="comment">//     console.log(&quot;then&quot;)</span></span><br><span class="line">            <span class="comment">//     return &#x27;return loop2&#x27;</span></span><br><span class="line">            <span class="comment">// &#125;)</span></span><br><span class="line">            </span><br><span class="line">            asyncReturn.then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;gen&#x27;</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(result);</span><br><span class="line">            &#125;)</span><br><span class="line">            resolve(asyncReturn)</span><br><span class="line">        &#125;)</span><br><span class="line">        middle.then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;middle&#x27;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> middle</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把原来async函数return的结果直接作为中间值asyncReturn。这样一来就很清晰了：middle接收一个Promise，这个Promise会resolve一个Promise，或者是Promise.then()，或者是Promise.then().then()，等等等等。</p><p>当resolve一个Promise，或者是Promise.then()的时候，middle都会在第二轮微任务中由pending转为fulfilled。对于Promise.then()的情况似乎很好理解，第一轮中执行then里面的内容并且将return结果作为PromiseResult包装成一个Promise，使得middle在第二轮微任务中可以进行then的操作。但是为什么resolve一个Promise也会让middle变为fulfilled的时间拖到第二轮呢？</p><p>由于并没有办法真正看到代码执行过程中resolve的步骤，我给出的猜测是这样的：resolve一个由new创建的Promise对象实例或者Promise.resolve()会自动隐式添加一个then方法，并且将这个then方法作为返回结果。因为一个真正的Promise对象不总是立即返回结果的，而resolve又需要一个状态来驱动then方法中回调函数的执行。而Promise.resolve().then()不会发生这样的事情，是因为then()函数返回的结果并不是直接由new创建的Promise对象，从语义上来说，then方法中往往执行的都是同步函数，因此不会为then再添加一个then，而是直接返回结果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JS中的任务队列详解&quot;&gt;&lt;a href=&quot;#JS中的任务队列详解&quot; class=&quot;headerlink&quot; title=&quot;JS中的任务队列详解&quot;&gt;&lt;/a&gt;JS中的任务队列详解&lt;/h2&gt;&lt;p&gt;在刷面试题的时候偶然遇到一道很复杂的输出判断题。自己之前对宏任务和微任务的理</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2021/08/08/hello-world/"/>
    <id>http://example.com/2021/08/08/hello-world/</id>
    <published>2021-08-08T06:27:42.352Z</published>
    <updated>2021-08-08T06:27:42.352Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
